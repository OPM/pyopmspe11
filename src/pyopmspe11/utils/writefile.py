# SPDX-FileCopyrightText: 2023 NORCE
# SPDX-License-Identifier: MIT
# pylint: disable=R0912

"""
Utiliy functions to write necessary files and variables
"""

import os
import subprocess
from mako.template import Template


def z_c(dic, j):
    """
    Return the z position of the zcorn

    Args:
        dic (dict): Global dictionary\n
        j : Cell id along the y axis

    Returns:
        z: Position

    """
    z = (
        dic["maxelevation"]
        - dic["elevation"] * (1.0 - (dic["ymy"][j] / (0.5 * dic["dims"][1]) - 1) ** 2.0)
        - dic["ymy"][j] * dic["backElevation"] / dic["dims"][1]
    )
    return z


def create_corner_point_grid(dic, xcoord, zcoord):
    """
    Write the corner-point grid

    Args:
        dic (dict): Global dictionary

    Returns:
        None

    """
    grid = []
    grid.append(
        "-- This deck was generated by pyopmspe11 https://github.com/OPM/pyopmspe11\n"
    )
    grid.append("-- Copyright (C) 2023 NORCE\n")
    grid.append("COORD\n")
    for j in range(dic["noCells"][1] + 1):
        for i in range(dic["noCells"][0] + 1):
            grid.append(
                f"{xcoord[i * (dic['noCells'][2] + 1)]:E} {dic['ymy'][j]} 0 "
                + f"{xcoord[i * (dic['noCells'][2] + 1) + dic['noCells'][2]]:E} {dic['ymy'][j]} 0 "
            )
    grid.append("/\n")
    grid.append("ZCORN\n")
    if dic["spe11"] == "spe11c":
        for j in range(dic["noCells"][1]):
            for i in range(dic["noCells"][0]):
                grid.append(f"{z_c(dic, j):E} {z_c(dic, j):E} ")
            for i in range(dic["noCells"][0]):
                grid.append(f"{z_c(dic, j+1):E} {z_c(dic, j+1):E} ")
        for k in range(dic["noCells"][2] - 1):
            for j in range(dic["noCells"][1]):
                for i in range(dic["noCells"][0]):
                    grid.append(
                        f"{z_c(dic, j) + zcoord[(i * (dic['noCells'][2] + 1)) + k + 1]:E} "
                        + f"{z_c(dic, j)+zcoord[((i + 1) * (dic['noCells'][2] + 1)) + k + 1]:E} "
                    )
                for i in range(dic["noCells"][0]):
                    grid.append(
                        f"{z_c(dic, j+1) + zcoord[(i * (dic['noCells'][2] + 1)) + k + 1]:E} "
                        + f"{z_c(dic, j+1)+zcoord[((i + 1) * (dic['noCells'][2] + 1)) + k + 1]:E} "
                    )
            grid.extend(grid[-2 * dic["noCells"][1] * dic["noCells"][0] :])
        for j in range(dic["noCells"][1]):
            for i in range(dic["noCells"][0]):
                grid.append(
                    f"{z_c(dic, j)+dic['dims'][2]:E} {z_c(dic, j)+dic['dims'][2]:E} "
                )
            for i in range(dic["noCells"][0]):
                grid.append(
                    f"{z_c(dic, j+1)+dic['dims'][2]:E} {z_c(dic, j+1)+dic['dims'][2]:E} "
                )
    else:
        for i in range(dic["noCells"][0]):
            grid.append(
                f"{zcoord[i*(dic['noCells'][2]+1)]:E} {zcoord[(i+1)*(dic['noCells'][2]+1)]:E} "
            )
        grid.extend(grid[-dic["noCells"][0] :])
        for k in range(dic["noCells"][2] - 1):
            for i in range(dic["noCells"][0]):
                grid.append(
                    f"{zcoord[(i * (dic['noCells'][2] + 1)) + k + 1]:E} "
                    + f"{zcoord[((i + 1) * (dic['noCells'][2] + 1)) + k + 1]:E} "
                )
            grid.extend(grid[-dic["noCells"][0] :])
            grid.extend(grid[-2 * dic["noCells"][0] :])
        for i in range(dic["noCells"][0]):
            grid.append(
                f"{zcoord[((i + 1) * (dic['noCells'][2] + 1)) - 1]:E} "
                + f"{zcoord[((i + 2) * (dic['noCells'][2] + 1)) - 1]:E} "
            )
        grid.extend(grid[-dic["noCells"][0] :])
    grid.append("/")
    with open(
        f"{dic['deckf']}/GRID.INC",
        "w",
        encoding="utf8",
    ) as file:
        file.write("".join(grid))


def write_keywords(dic):
    """
    Write some of the used keywords and values for OPM Flow

    Args:
        dic (dict): Global dictionary

    Returns:
        dic (dict): Modified global dictionary

    """
    git = "-- This deck was generated by pyopmspe11 https://github.com/OPM/pyopmspe11\n"
    dic["dx"] = False
    if dic["spe11"] == "spe11a":
        if dic["grid"] == "tensor":
            keywords = ["fluxnum", "fipnum", "dx", "dz"]
            dic["dx"] = list(map(str, list((dic["xmx"][1:] - dic["xmx"][:-1]))))
            d_z = list(map(str, list((dic["zmz"][1:] - dic["zmz"][:-1]))))
            dic["dz"] = [d_z[0]] * dic["noCells"][0]
            for i in range(dic["noCells"][2] - 1):
                dic["dx"].extend(dic["dx"][-dic["noCells"][0] :])
                dic["dz"] += [d_z[i + 1]] * dic["noCells"][0]
        else:
            keywords = ["fluxnum", "fipnum"]
    elif dic["spe11"] == "spe11b":
        d_x = dic["xmx"][1:] - dic["xmx"][:-1]
        if dic["grid"] == "tensor":
            keywords = ["fluxnum", "fipnum", "dx", "dz"]
            dic["dx"] = list(map(str, list((d_x))))
            d_z = list(map(str, list((dic["zmz"][1:] - dic["zmz"][:-1]))))
            dic["dz"] = [d_z[0]] * dic["noCells"][0]
            for i in range(dic["noCells"][2] - 1):
                dic["dx"].extend(dic["dx"][-dic["noCells"][0] :])
                dic["dz"] += [d_z[i + 1]] * dic["noCells"][0]
        else:
            keywords = ["fluxnum", "fipnum"]
            if min(d_x) != max(d_x) and dic["grid"] == "cartesian":
                keywords += ["dx"]
                dic["dx"] = [
                    str(d_x[0]),
                    str(d_x[1]),
                    f"{dic['noCells'][0]-4}*{dic['dsize'][0]}",
                    str(d_x[1]),
                    str(d_x[0]),
                ]
                for _ in range(dic["noCells"][2] - 1):
                    dic["dx"].extend(dic["dx"][-5:])
        added_pv(dic, git)
    else:
        keywords = ["fluxnum", "fipnum"]
        added_pv(dic, git)
    for names in keywords:
        dic[f"{names}"].insert(0, f"{names.upper()}\n")
        dic[f"{names}"].insert(0, git)
        dic[f"{names}"].insert(0, "-- Copyright (C) 2023 NORCE\n")
        dic[f"{names}"].append("/")
        with open(
            f"{dic['deckf']}/{names.upper()}.INC",
            "w",
            encoding="utf8",
        ) as file:
            file.write(" ".join(dic[f"{names}"]))


def added_pv(dic, git):
    """
    Write the added pore volume on the boundaries

    Args:
        dic (dict): Global dictionary\n
        git (str): Link to the pyopmspe11 GitHub repository

    Returns:
        dic (dict): Modified global dictionary

    """
    dic["porv"].insert(0, "EQUALS")
    dic["porv"].insert(0, git)
    dic["porv"].insert(0, "-- Copyright (C) 2023 NORCE")
    dic["porv"].append("/")
    with open(
        f"{dic['deckf']}/PVBOUNDARIES.INC",
        "w",
        encoding="utf8",
    ) as file:
        file.write("\n".join(dic["porv"]))


def opm_files(dic):
    """
    Write opm-related files by running mako templates

    Args:
        dic (dict): Global dictionary

    Returns:
        None

    """
    write_keywords(dic)
    mytemplate = Template(filename=f"{dic['pat']}/templates/co2/{dic['spe11']}.mako")
    var = {"dic": dic}
    filledtemplate = mytemplate.render(**var)
    with open(
        f"{dic['deckf']}/{dic['fol'].split('/')[-1].upper()}.DATA",
        "w",
        encoding="utf8",
    ) as file:
        file.write(filledtemplate)
    mytemplate = Template(
        filename=f"{dic['pat']}/templates/common/saturation_functions.mako"
    )
    filledtemplate = mytemplate.render(**var)
    with open(
        f"{dic['deckf']}/saturation_functions.py",
        "w",
        encoding="utf8",
    ) as file:
        file.write(filledtemplate)
    os.system(f"chmod u+x {dic['deckf']}/saturation_functions.py")
    prosc = subprocess.run(
        ["python3", f"{dic['deckf']}/saturation_functions.py"],
        check=True,
    )
    if prosc.returncode != 0:
        raise ValueError(f"Invalid result: { prosc.returncode }")
    os.system(f"rm -rf {dic['deckf']}/saturation_functions.py")
    if dic["spe11"] == "spe11c" and dic["grid"] != "corner-point":
        grid = []
        grid.append(
            "-- This deck was generated by pyopmspe11 https://github.com/OPM/pyopmspe11\n"
        )
        grid.append("-- Copyright (C) 2023 NORCE\n")
        grid.append("COORD\n")
        for j in range(dic["noCells"][1] + 1):
            for i in range(dic["noCells"][0] + 1):
                grid.append(
                    f"{dic['xmx'][i]:E} {dic['ymy'][j]} 0 {dic['xmx'][i]:E} {dic['ymy'][j]} 0 "
                )
        grid.append("/\n")
        grid.append("ZCORN\n")
        for j in range(dic["noCells"][1]):
            for i in range(dic["noCells"][0]):
                grid.append(f"{z_c(dic, j):E} {z_c(dic, j):E} ")
            for i in range(dic["noCells"][0]):
                grid.append(f"{z_c(dic, j+1):E} {z_c(dic, j+1):E} ")
        for k in range(dic["noCells"][2] - 1):
            for j in range(dic["noCells"][1]):
                for i in range(dic["noCells"][0]):
                    grid.append(
                        f"{z_c(dic, j) + dic['zmz'][k+1]:E} {z_c(dic, j)+dic['zmz'][k+1]:E} "
                    )
                for i in range(dic["noCells"][0]):
                    grid.append(
                        f"{z_c(dic, j+1) + dic['zmz'][k+1]:E} {z_c(dic, j+1)+dic['zmz'][k+1]:E} "
                    )
            grid.extend(grid[-2 * dic["noCells"][1] * dic["noCells"][0] :])
        for j in range(dic["noCells"][1]):
            for i in range(dic["noCells"][0]):
                grid.append(
                    f"{z_c(dic, j)+dic['dims'][2]:E} {z_c(dic, j)+dic['dims'][2]:E} "
                )
            for i in range(dic["noCells"][0]):
                grid.append(
                    f"{z_c(dic, j+1)+dic['dims'][2]:E} {z_c(dic, j+1)+dic['dims'][2]:E} "
                )
        grid.append("/")
        with open(
            f"{dic['deckf']}/GRID.INC",
            "w",
            encoding="utf8",
        ) as file:
            file.write("".join(grid))
